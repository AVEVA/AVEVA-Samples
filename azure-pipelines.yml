# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


  
jobs:      


- job: SDSPy

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_config.ini


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_config.ini
        targetFolder: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Python/SDSPy/Python3/'
        #cleanTargetFolder: false # Optional
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file

    - script: |
        mv prod_config.ini config.ini
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Python/SDSPy/Python3/
      displayName: 'rename config file'
      

      
    - script: |
        pip install setuptools wheel
        pip install unittest-xml-reporting    
        pip install pytest
        pip install pytest-cov
      displayName: 'Install tools'
      
      
    - script: |
        pip install -r requirements.txt
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Python/SDSPy/Python3/
      displayName: 'Install requirements'
      
    - script: |
        python -m pytest ./program.py
      displayName: 'Test with pytest'
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Python/SDSPy/Python3/

- job: DataviewPy

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: config.ini


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: config.ini
        targetFolder: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/Dataviews/Python3/'
        #cleanTargetFolder: false # Optionalocs_samples/basic_samples\Dataviews\Python3
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file

      
    - script: |
        pip install setuptools wheel
        pip install unittest-xml-reporting    
        pip install pytest
        pip install pytest-cov
      displayName: 'Install tools'
      
      
    - script: |
        pip install -r requirements.txt
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/Dataviews/Python3/
      displayName: 'Install requirements'
      
    - script: |
        python -m pytest ./program.py
      displayName: 'Test with pytest'
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/Dataviews/Python3/

- job: OMF_APIPy

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_omf_config.ini


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_omf_config.ini
        targetFolder: '$(Build.SourcesDirectory)/basic_samples/OMF_API/Python3/'
        #cleanTargetFolder: false # Optional
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file

    - script: |
        mv prod_omf_config.ini config.ini
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/OMF_API/Python3/
      displayName: 'rename config file'
      

      
    - script: |
        pip install setuptools wheel
        pip install unittest-xml-reporting    
        pip install pytest
        pip install pytest-cov
      displayName: 'Install tools'
      
      
    - script: |
        pip install -r requirements.txt
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/OMF_API/Python3/
      displayName: 'Install requirements'
      
    - script: |
        python -m pytest ./program.py
      displayName: 'Test with pytest'
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/OMF_API/Python3/

- job: SDSJava

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_config.properties

      #
    - script: mvn install -f pom.xml 
      workingDirectory: $(Build.SourcesDirectory)/library_samples/Java/ocs_sample_library_preview/
      displayName: install library

    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_config.properties
        targetFolder: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Java/sdsjava/'
        #cleanTargetFolder: false # Optional
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file
      

    - script: |
        mv prod_config.properties config.properties
      workingDirectory: $(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Java/sdsjava/
      displayName: 'Install requirements'
      
    - task: Maven@3
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/SDS/Java/sdsjava/pom.xml'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        goals: 'test'
  
- job: DataviewJava

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: config.properties

      #
    - script: mvn install -f pom.xml 
      workingDirectory: $(Build.SourcesDirectory)/library_samples/Java/ocs_sample_library_preview/
      displayName: install library

    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: config.properties
        targetFolder: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/Dataviews/Java/dataviewjava/'
        #cleanTargetFolder: false # Optional
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file
      
    - task: Maven@3
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/ocs_samples/basic_samples/Dataviews/Java/dataviewjava/pom.xml'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        goals: 'test'
    
- job: SDSDotNet

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_appsettings.json


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_appsettings.json
        targetFolder: '$(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsClientLibraries/SdsClientLibraries/'
        #cleanTargetFolder: false # Optional  
        overWrite: true # Optional
        #flattenFolders: false # Optional 
      displayName: copy file

    - script: |
        mv prod_appsettings.json appsettings.json
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsClientLibraries/SdsClientLibraries/
      displayName: 'rename config file'     
      
    - script: |
        dotnet restore
        dotnet test
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsClientLibraries/SdsClientLibrariesCoreTests/
      displayName: 'Run Test'
    
- job: OMF_APIDotNet

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_omf_appsettings.json


    # Copy Files basic_samples\OMF_API\CSharp\OMF_API
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_omf_appsettings.json
        targetFolder: '$(Build.SourcesDirectory)/basic_samples/OMF_API/CSharp/OMF_API/'
        #cleanTargetFolder: false # Optional  
        overWrite: true # Optional
        #flattenFolders: false # Optional 
      displayName: copy file

    - script: |
        mv prod_omf_appsettings.json appsettings.json
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/OMF_API/CSharp/OMF_API/
      displayName: 'rename config file'     
      
    - script: |
        dotnet restore
        dotnet test
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/OMF_API/CSharp/OMF_APITests/
      displayName: 'Run Test'
     
- job: SDSDotNetAPI

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: prod_appsettings.json


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: prod_appsettings.json
        targetFolder: '$(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsRestApiCore/SdsRestApiCore/'
        #cleanTargetFolder: false # Optional  
        overWrite: true # Optional
        #flattenFolders: false # Optional 
      displayName: copy file

    - script: |
        mv prod_appsettings.json appsettings.json
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsRestApiCore/SdsRestApiCore/
      displayName: 'rename config file'         
      
    - script: |
        dotnet restore
        dotnet test
      workingDirectory: $(Build.SourcesDirectory)/basic_samples/SDS/DotNet/SdsRestApiCore/SdsRestApiCoreTest/
      displayName: 'Run Test' 

