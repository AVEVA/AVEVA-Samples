parameters:
  skip: false # Tell the task to skip completely, for unsupported agents
  skipPolaris: false # For samples that have no code Polaris is capable of scanning
  useRequirementsTxt: false # Tell the task to use Python requirements.txt for BlackDuck
  projectPath: '' # (Optional) Tell the task to use a specific path to the project
  snippetMatching: SNIPPET_MATCHING

steps:
  # Synopsys Polaris
  - powershell: |
      # Set up Polaris Project Name, Access Token
      New-Item -Path Env:\ -Name POLARIS_PROJECT_NAME -Value $(analysisProject)
      New-Item -Path Env:\ -Name POLARIS_ACCESS_TOKEN -Value $(polarisToken)

      # Call Polaris, set the configuration file path and run analyze with wait option
      & 'polaris.exe' -c polaris.yml analyze -w
    condition: and(succeeded(), eq(${{ parameters.skip }}, false), eq(${{ parameters.skipPolaris }}, false))
    workingDirectory: $(Build.SourcesDirectory)${{ parameters.projectPath }}
    displayName: 'Analysis: Polaris'

  - script: pip install -r requirements.txt
    condition: and(succeeded(), eq(${{ parameters.skip }}, false), eq(${{ parameters.useRequirementsTxt }}, true))
    displayName: 'Install requirements.txt'
    
  - template: Pipelines/Templates/BlackDuck/BlackDuckSourceScan.step.v0.yml@OpsGuildAutomationRepo
    parameters:
      projectName: "product-readiness.$(analysisProject)"
      projectVersionName: "$(Build.SourceBranchName)"
      sourcePath: "$(Build.SourcesDirectory)${{ parameters.projectPath }}"
      detectorSearchDepth: 0
