parameters:
  runBinSkim: false # Opt-in to BinSkim only for dotnet samples
  deleteBinSkim: '' # This parameter is used to delete files before running BinSkim. Only use this if the error has been investigated and can be safely ignored
  skipPolaris: false # For samples that have no code Polaris is capable of scanning
  useRequirements: false # Tell the pipeline to use Python requirements.txt for BlackDuck

steps:
  # BinSkim errors if it encounters badly signed Microsoft files
  # To avoid this issue, delete the files before running BinSkim
  - task: DeleteFiles@1
    displayName: 'BinSkim (DotNet): Delete Files'
    inputs:
      SourceFolder: $(Build.SourcesDirectory)$(projPath)
      Contents: '${{ parameters.deleteBinSkim }}'
    condition: and(eq(${{ parameters.runBinSkim }}, true), ne('${{ parameters.deleteBinSkim }}', ''))

  - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-binskim.BinSkim@3
    displayName: 'BinSkim (DotNet): Analyze'
    inputs:
      AnalyzeTarget: '$(Build.SourcesDirectory)\*.dll;$(Build.SourcesDirectory)\*.exe'
      toolVersion: LatestPreRelease
    condition: eq(${{ parameters.runBinSkim }}, true)

  - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-postanalysis.PostAnalysis@1
    displayName: 'BinSkim (DotNet): Post-Analysis'
    inputs:
      BinSkim: true
      BinSkimBreakOn: WarningAbove
    condition: eq(${{ parameters.runBinSkim }}, true)

  # Synopsys Polaris
  - powershell: |
      # Set up Polaris Project Name, Access Token
      New-Item -Path Env:\ -Name POLARIS_PROJECT_NAME -Value $(analysisProject)
      New-Item -Path Env:\ -Name POLARIS_ACCESS_TOKEN -Value $(polarisToken)

      # Call Polaris, set the configuration file path and run analyze with wait option
      & 'polaris.exe' -c polaris.yml analyze -w
    workingDirectory: $(Build.SourcesDirectory)$(projPath)/
    condition: eq(${{ parameters.skipPolaris }}, false)
    displayName: 'Polaris Analyze'

  # Synopsys BlackDuck
  - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
    inputs:
      Products: BD
      BlackDuckService: 'product-readiness.BlackDuck'
      DetectArguments: |
        --detect.project.name="product-readiness.$(analysisProject)"
        --detect.project.version.name="$(Build.SourceBranchName)"
        --detect.source.path=$(Build.SourcesDirectory)$(projPath)/
        --detect.code.location.name="code_location_$(analysisProject)_$(Build.SourceBranchName)"
        --detect.bom.aggregate.name="bom_$(analysisProject)_$(Build.SourceBranchName)"
    condition: and(succeeded(), eq(${{ parameters.useRequirementsTxt }}, false))
    displayName: 'Synopsys Detect: BlackDuck'

  - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
    inputs:
      Products: BD
      BlackDuckService: 'product-readiness.BlackDuck'
      DetectArguments: |
        --detect.project.name="product-readiness.$(analysisProject)"
        --detect.project.version.name="$(Build.SourceBranchName)"
        --detect.source.path=$(Build.SourcesDirectory)$(projPath)/
        --detect.code.location.name="code_location_$(analysisProject)_$(Build.SourceBranchName)"
        --detect.bom.aggregate.name="bom_$(analysisProject)_$(Build.SourceBranchName)"
        --detect.pip.requirements.path=$(Build.SourcesDirectory)$(projPath)/requirements.txt
    condition: and(succeeded(), eq(${{ parameters.useRequirementsTxt }}, true))
    displayName: 'Synopsys Detect: BlackDuck (Python Requirements.txt)'
